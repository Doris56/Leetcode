//题目描述
给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。
Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. 
If no such two words exist, return 0.

输入: ["abcw","baz","foo","bar","xtfn","abcdef"]
输出: 16 
解释: 这两个单词为 "abcw", "xtfn"。

输入: ["a","ab","abc","d","cd","bcd","abcd"]
输出: 4 
解释: 这两个单词为 "ab", "cd"。

输入: ["a","aa","aaa","aaaa"]
输出: 0 
解释: 不存在这样的两个单词。

//解答

class Solution:
    def maxProduct(self, words: List[str]) -> int:
        bo=True
        leni=0
        lenj=0
        a=0
        max=0
        for i in range(len(words)):
            leni=len(words[i])
            for j in range(i+1,len(words)):
                lenj=len(words[j])
                bo=True             //创建bo判断是否含共有字母
                for x in words[i]:    
                    if x in words[j] :
                        bo=False
                        break
                if max<(leni*lenj) and bo==True:  //是否同时满足两个条件 
                    max=leni*lenj
        return max
